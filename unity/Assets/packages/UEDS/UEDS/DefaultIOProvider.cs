// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.IO;
using System.Xml.Serialization;
using System.Collections;


namespace UEDS
{
	public class ExistCheckParams
	{
		public bool mResult;
		public string mPath;
		public ExistCheckParams(string pPath)
		{
			mPath = pPath;
		}
	}
	
	#if !UNITY_METRO
	/// <summary>
	/// Default IO provider. Marked using the EditorSettingIOProviderAttribute. 
	/// Remove the Attribute and add it to your own class or register your IOProvider via the static method Settings.SetIOProvider. 
	/// Your class must implement the IGlobalEditorSettingsIOProvider Interface. 
	/// </summary>
	[UEDS.EditorSettingIOProvider]
	public class DefaultIOProvider : IGlobalEditorSettingsIOProvider
	{
		public DefaultIOProvider ()
		{
			LoaderFinished = false;
		}

		SerializedRoot mLoadedData;

		#region writer
		public bool WriterFinished
		{
			get; private set;
		}
		public bool WriterHasError
		{
			get
			{
				return (WriterError != null && WriterError.Length != 0);
			}
		}
		public string WriterError
		{
			get; private set;
		}

		
		public void Save<T>(T pObject, string pPath) where T : SerializedRoot, new()
		{
			WriterError = null;
			WriterFinished = false;
			try
			{
			FileStream writer = new FileStream(pPath, FileMode.Create);
			

			XmlSerializer s = new XmlSerializer(typeof(T));
			s.Serialize(writer, pObject);
			
			writer.Close();
			}catch(System.Exception e)
			{
				WriterError = e.Message + e.StackTrace;
				while(e.InnerException != null)
				{
					WriterError += e.InnerException.Message;
					e = e.InnerException;
				}

				
			}finally
			{
				WriterFinished = true;
			}
		}
		#endregion
		#region loader
		public bool LoaderFinished
		{
			get; private set;
		}
		public bool LoaderHasError
		{
			get
			{
				return (LoaderError != null && LoaderError.Length != 0);
			}
		}
		public string LoaderError
		{
			get; private set;
		}


		public void Load<T>(string pPath) where T : SerializedRoot, new()
		{
			LoaderError = null;
			LoaderFinished = false;
			try
			{
				StreamReader reader = new StreamReader(pPath);
				
				XmlSerializer s = new XmlSerializer(typeof(T));
				mLoadedData = s.Deserialize(reader) as T;
			}
			catch(System.Exception e)
			{

				LoaderError = e.Message + e.StackTrace;
				while(e.InnerException != null)
				{
					LoaderError += " > " +  e.InnerException.Message;
					e = e.InnerException;
				}
			}finally
			{
				LoaderFinished = true;
			}
		}

		#endregion

		public IEnumerator Exists(ExistCheckParams pParams)
		{
			System.IO.FileInfo fi = new FileInfo(pParams.mPath);
			yield return 0;
			pParams.mResult = fi.Exists;
			yield break;
		}


		public void CreateEmpty<T>() where T : SerializedRoot, new()
		{
			mLoadedData = new T();
		}



		#region data access
		public T GetData<T>() where T : SerializedRoot, new()
		{
			return mLoadedData as T;
		}

		#endregion 
	}
	
	
	#endif
}